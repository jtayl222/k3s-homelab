---
# Verify prerequisites
- name: Ensure kubeconfig exists
  ansible.builtin.stat:
    path: "{{ kubeconfig_path }}"
  register: kubeconfig_stat
  become: false

- name: Fail if kubeconfig doesn't exist
  ansible.builtin.fail:
    msg: "Kubeconfig not found at {{ kubeconfig_path }}. Please run the kubeconfig tasks first."
  when: not kubeconfig_stat.stat.exists
  become: false

# Clone repository
- name: Clone homelab-mlops-demo repository
  ansible.builtin.git:
    repo: "{{ mlops_demo_app_repo_url }}"
    dest: "{{ mlops_demo_app_repo_path }}"
    version: "{{ mlops_demo_app_repo_branch }}"
    force: "{{ mlops_demo_app_force_clone }}"
  become: false
  register: git_clone_result

- name: Debug controller service status
  ansible.builtin.command: kubectl --kubeconfig="{{ kubeconfig_path }}" get svc -n {{ sealed_secrets_namespace }} sealed-secrets
  register: service_status
  changed_when: false
  become: false

- name: Wait for SealedSecret CRD to be available
  ansible.builtin.shell: |
    kubectl --kubeconfig="{{ kubeconfig_path }}" get crd sealedsecrets.bitnami.com
  register: crd_check
  until: crd_check.rc == 0
  retries: 30
  delay: 10
  changed_when: false
  become: false

# Apply RBAC configurations if they exist
- name: Apply RBAC configurations
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    src: "{{ mlops_demo_app_repo_path }}/applications/{{ item }}"
  loop: "{{ mlops_demo_app_rbac_files }}"
  become: false
  when: mlops_demo_app_rbac_files is defined and mlops_demo_app_rbac_files | length > 0

# Apply the ArgoCD Application
- name: Apply ArgoCD Application for demo-iris-pipeline
  ansible.builtin.command: kubectl --kubeconfig="{{ kubeconfig_path }}" apply -f "{{ mlops_demo_app_repo_path }}/applications/demo-iris-pipeline-app.yaml"
  become: false
  changed_when: "'configured' in result.stdout or 'created' in result.stdout"
  register: result

# Generate ConfigMap using GitOps approach
- name: Generate and apply ConfigMap
  ansible.builtin.shell: |
    cd "{{ mlops_demo_app_repo_path }}"
    export KUBECONFIG="{{ kubeconfig_path }}"
    ./scripts/update-configmap.sh {{ argowf_namespace }}
  become: false
  register: configmap_result
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

# Wait for the application to be synchronized
- name: Wait for Argo CD Application to be synchronized
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} get applications.argoproj.io demo-iris-pipeline -n argocd -o jsonpath='{.status.sync.status}'
  register: sync_status
  until: sync_status.stdout == 'Synced'
  retries: 10
  delay: 30
  changed_when: false
  become: false
  ignore_errors: true

- name: Display deployment status
  ansible.builtin.debug:
    msg:
      - "=========== MLOPS DEMO DEPLOYMENT STATUS ==========="
      - "Repository: {{ mlops_demo_app_repo_url }}"
      - "Branch: {{ mlops_demo_app_repo_branch }}"
      - "Clone Status: {{ 'Success' if git_clone_result.rc == 0 else 'Failed' }}"
      - "Sync Status: {{ sync_status.stdout if sync_status is defined and sync_status.rc == 0 else 'Application not found or sync failed' }}"
      - ""
      - "Access ArgoCD UI to manage the demo application:"
      - "URL: https://192.168.1.85:30080"
      - "Application: demo-iris-pipeline"
      - "=================================================="
