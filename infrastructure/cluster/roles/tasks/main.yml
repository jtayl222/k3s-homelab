- name: Install prerequisites
  ansible.builtin.apt:
    name:
      - curl
      - apt-transport-https
    state: present
    update_cache: yes
  become: true
  when: k3s_state == 'present'

- name: Install networking diagnostic utilities
  ansible.builtin.apt:
    name:
      - net-tools
      - netcat-openbsd
      - curl
      - traceroute
      - iproute2
      - iputils-ping
      - dnsutils
    state: present
    update_cache: yes
  become: true
  when: k3s_state == 'present'

- name: Download k3s install script
  ansible.builtin.get_url:
    url: https://get.k3s.io
    dest: /tmp/k3s-install.sh
    mode: "0755"
  become: true
  when: k3s_state == 'present'

- name: Install k3s control plane
  ansible.builtin.command: /tmp/k3s-install.sh
  environment:
    INSTALL_K3S_EXEC: --datastore-endpoint='sqlite:///var/lib/rancher/k3s/server.db'
  args:
    creates: /usr/local/bin/k3s
  become: true
  when: k3s_state == 'present'

- name: Ensure k3s service is enabled and started
  ansible.builtin.systemd:
    name: k3s
    enabled: yes
    state: started
  become: true
  when: k3s_state == 'present'

- name: Wait for k3s to be up and running
  ansible.builtin.wait_for:
    port: 6443
    delay: 10
  become: true
  when: k3s_state == 'present'

- name: Get the node token from the control plane
  ansible.builtin.command: cat /var/lib/rancher/k3s/server/node-token
  register: node_token
  changed_when: false
  become: true
  when: k3s_state == 'present'

- name: Store node token
  ansible.builtin.set_fact:
    k3s_token: "{{ node_token.stdout }}"
  when: k3s_state == 'present' and node_token is defined

- name: Display the node token
  ansible.builtin.debug:
    msg: Node token is {{ k3s_token }}
  when: k3s_state == 'present' and k3s_token is defined

# Uninstallation tasks - only run when k3s_state is absent
- name: Check if k3s is installed
  ansible.builtin.stat:
    path: /usr/local/bin/k3s
  register: k3s_binary
  when: k3s_state == 'absent'

- name: Check if uninstall script exists
  ansible.builtin.stat:
    path: /usr/local/bin/k3s-uninstall.sh
  register: uninstall_script
  when: k3s_state == 'absent'

- name: Run k3s uninstall script
  ansible.builtin.command: /usr/local/bin/k3s-uninstall.sh
  register: uninstall_result
  changed_when: true  # Uninstall will always make changes when it runs
  become: true
  when: k3s_state == 'absent' and uninstall_script.stat.exists

- name: Manual cleanup if uninstall script doesn't exist
  when: k3s_state == 'absent' and k3s_binary.stat.exists and not uninstall_script.stat.exists
  become: true
  block:
    - name: Stop k3s service
      ansible.builtin.systemd:
        name: k3s
        state: stopped
        enabled: no
      register: stop_service
      failed_when: stop_service.failed and "Could not find the requested service" not in stop_service.msg

    - name: Remove k3s binary
      ansible.builtin.file:
        path: /usr/local/bin/k3s
        state: absent

    - name: Remove k3s directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /etc/rancher/k3s
        - /var/lib/rancher/k3s
        - /var/lib/kubelet
        - /var/lib/cni

- name: Remove kubeconfig
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/rancher/k3s/k3s.yaml
    - ~/.kube/config
  register: remove_kubeconfig
  failed_when: remove_kubeconfig.failed and not ('path not found' in remove_kubeconfig.msg)
  when: k3s_state == 'absent'
  become: true
