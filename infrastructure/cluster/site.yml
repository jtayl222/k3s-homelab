---
# Professional MLOps Platform Deployment

# Play 1a: K3s Control Plane
- name: Setup K3s Control Plane
  hosts: k3s_control_plane
  become: true
  gather_facts: true
  tasks:
    - name: Debug before calling control plane role
      ansible.builtin.debug:
        msg: "About to call k3s_control_plane role with k3s_state={{ k3s_state | default('undefined') }}"
      tags: [k3s, control_plane, debug]

    - name: Deploy or Remove K3s Control Plane
      include_role:
        name: foundation/k3s_control_plane  # âœ… Fixed path
      tags: [k3s, control_plane]

# Play 1b: K3s Workers
- name: Setup K3s Workers
  hosts: k3s_workers
  become: true
  gather_facts: true
  tasks:
    - name: Deploy or Remove K3s Workers
      include_role:
        name: foundation/k3s_workers  # âœ… Fixed path
      tags: [k3s, workers]

# Play 2: NFS Infrastructure Setup
- name: Setup NFS Infrastructure
  hosts: nfs_server:k3s_control_plane:k3s_workers
  gather_facts: true
  become: true
  tasks:
    # NFS Server
    - name: Deploy NFS Server
      include_role:
        name: foundation/nfs_server  # âœ… Fixed path
      when: 
        - inventory_hostname in groups['nfs_server']
        - k3s_state is not defined or k3s_state != "absent"
      tags: [storage, nfs, nfs-server]

    # NFS Clients
    - name: Deploy NFS Clients
      include_role:
        name: foundation/nfs_clients  # âœ… Fixed path
      when: 
        - inventory_hostname in groups['k3s_control_plane'] or inventory_hostname in groups['k3s_workers']
        - k3s_state is not defined or k3s_state != "absent"
      tags: [storage, nfs, nfs-clients]

# Play 3: Kubernetes Infrastructure Setup
- name: Setup Kubernetes Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Deploy Kubernetes Components
      block:
        # Kubeconfig
        - name: Fetch kubeconfig
          include_role:
            name: foundation/fetch_kubeconfig  # âœ… Fixed path
          tags: [k3s, kubeconfig]

        # NFS Provisioner
        - name: Deploy NFS Provisioner
          include_role:
            name: foundation/nfs_provisioner  # âœ… Fixed path
          tags: [storage, nfs, nfs-provisioner]

        # Sealed Secrets
        - name: Deploy Sealed Secrets
          include_role:
            name: foundation/sealed_secrets  # âœ… Fixed path
          tags: [security, sealed-secrets]

      when: k3s_state is not defined or k3s_state != "absent"

# Play 4: Core Platform Deployment
- name: Deploy Core Platform
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Deploy All Core Components
      block:
        # === FOUNDATION LAYER ===
        - name: Deploy Secrets for Active Components
          include_role:
            name: foundation/secrets
          tags: [foundation, secrets, credentials, mlflow, workflows, kubeflow]

        # === STORAGE LAYER ===
        - name: Deploy MinIO Storage
          include_role:
            name: storage/minio
          tags: [core, storage, minio]

        - name: Deploy Storage Credentials
          include_role:
            name: storage/credentials
          tags: [core, storage, credentials]

        # === MONITORING LAYER ===
        - name: Deploy Prometheus Monitoring Stack
          include_role:
            name: monitoring/prometheus_stack
          tags: [core, monitoring, prometheus]

        # === PLATFORM LAYER ===
        - name: Deploy Argo CD
          include_role:
            name: platform/argo_cd
          tags: [platform, argocd]

        - name: Deploy Argo Workflows
          include_role:
            name: platform/argo_workflows
          tags: [platform, workflows]

        - name: Deploy Kubernetes Dashboard
          include_role:
            name: platform/dashboard
          tags: [platform, dashboard]

        - name: Deploy JupyterHub
          include_role:
            name: platform/jupyterhub
          tags: [platform, jupyter]

        - name: Deploy Seldon Core
          include_role:
            name: platform/seldon
          tags: [platform, model-serving]

        # === MLOPS LAYER ===
        - name: Deploy MLflow
          include_role:
            name: mlops/mlflow
          tags: [mlops, mlflow]

        - name: Deploy Kubeflow Pipelines
          include_role:
            name: mlops/kubeflow
          tags: [mlops, kubeflow, pipelines]

      when: k3s_state is not defined or k3s_state != "absent"

# Play 5: Demo Application
- name: Deploy Demo Application
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Deploy ML Demo Pipeline
      block:
        - include_role:
            name: demo/mlops_demo_app  # âœ… Fixed path
      when: k3s_state is not defined or k3s_state != "absent"
      tags: [demo, mlops-demo]

# Play 6: Summary and Cleanup
- name: Deployment Summary and Cleanup
  hosts: localhost:nfs_server
  gather_facts: false
  tasks:
    # Deployment Summary (localhost only)
    - name: Show deployment summary
      debug:
        msg:
          - "ðŸŽ‰ Production MLOps Platform Deployment Complete!"
          - ""
          - "ðŸš€ MLOps Core Services:"
          - "- MLflow: http://192.168.1.85:30800"
          - "- Seldon Core: http://192.168.1.85:32000"
          - "- Argo CD: http://192.168.1.85:30080"
          - "- JupyterHub: http://192.168.1.85:30888"
          - "- Kubernetes Dashboard: http://192.168.1.85:30443"
          - ""
          - "ðŸ“Š Monitoring & Storage:"
          - "- Grafana: http://192.168.1.85:30300"
          - "- Prometheus: http://192.168.1.85:30090"
          - "- MinIO Console: http://192.168.1.85:30901"
          - ""
          - "ðŸ”§ Cluster Management:"
          - "- Kubeflow Pipelines: http://192.168.1.85:31234 (if deployed)"
          - "- Argo Workflows: http://192.168.1.85:32746 (if deployed)"
          - ""
          - "ðŸ”‘ Access Instructions:"
          - "- kubectl: export KUBECONFIG=/tmp/k3s-kubeconfig.yaml"
          - "- Dashboard: Use --enable-skip-login for demo access"
      when: 
        - inventory_hostname == 'localhost'
        - k3s_state is not defined or k3s_state != "absent"
      tags: [summary]

    # NFS Cleanup (nfs_server only)
    - name: Clean up NFS storage
      shell: |
        find /srv/nfs/kubernetes/ -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} \;
        echo "Cleaned up NFS storage"
      become: true
      when: 
        - inventory_hostname in groups['nfs_server']
        - k3s_state is defined and k3s_state == "absent"
      tags: [cleanup, nfs-cleanup]