---
# Professional MLOps Platform Deployment

# Play 1a: K3s Control Plane
- name: Setup K3s Control Plane
  hosts: k3s_control_plane
  become: true
  gather_facts: true
  tasks:
    - name: Debug before calling control plane role
      ansible.builtin.debug:
        msg: "About to call k3s_control_plane role with k3s_state={{ k3s_state | default('undefined') }}"
      tags: [k3s, control_plane, debug]

    - name: Deploy or Remove K3s Control Plane
      include_role:
        name: k3s_control_plane
      tags: [k3s, control_plane]

# Play 1b: K3s Workers
- name: Setup K3s Workers
  hosts: k3s_workers
  become: true
  gather_facts: true
  tasks:
    - name: Deploy or Remove K3s Workers
      include_role:
        name: k3s_workers
      tags: [k3s, workers]

# Play 2: NFS Infrastructure Setup
- name: Setup NFS Infrastructure
  hosts: nfs_server:k3s_control_plane:k3s_workers
  gather_facts: true
  become: true
  tasks:
    # NFS Server
    - name: Deploy NFS Server
      include_role:
        name: nfs_server
      when: 
        - inventory_hostname in groups['nfs_server']
        - k3s_state is not defined or k3s_state != "absent"
      tags: [storage, nfs, nfs-server]

    # NFS Clients
    - name: Deploy NFS Clients
      include_role:
        name: nfs_clients
      when: 
        - inventory_hostname in groups['k3s_control_plane'] or inventory_hostname in groups['k3s_workers']
        - k3s_state is not defined or k3s_state != "absent"
      tags: [storage, nfs, nfs-clients]

# Play 3: Kubernetes Infrastructure Setup
- name: Setup Kubernetes Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Deploy Kubernetes Components
      block:
        # Kubeconfig
        - name: Fetch kubeconfig
          include_role:
            name: fetch_kubeconfig
          tags: [k3s, kubeconfig]

        # NFS Provisioner
        - name: Deploy NFS Provisioner
          include_role:
            name: nfs_provisioner
          tags: [storage, nfs, nfs-provisioner]

        # Sealed Secrets
        - name: Deploy Sealed Secrets
          include_role:
            name: sealed_secrets
          tags: [security, sealed-secrets]

      when: k3s_state is not defined or k3s_state != "absent"

# Play 4: Core Platform Deployment (All Helm charts)
- name: Deploy Core Platform
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Deploy All Core Components
      block:
        # Helm repositories
        - name: Add Helm repositories
          kubernetes.core.helm_repository:
            name: "{{ item.name }}"
            repo_url: "{{ item.url }}"
            kubeconfig: "{{ kubeconfig_path }}"
          loop:
            - { name: "prometheus-community", url: "https://prometheus-community.github.io/helm-charts" }
            - { name: "grafana", url: "https://grafana.github.io/helm-charts" }
            - { name: "bitnami", url: "https://charts.bitnami.com/bitnami" }
            - { name: "argo", url: "https://argoproj.github.io/argo-helm" }
            - { name: "seldon", url: "https://storage.googleapis.com/seldon-charts" }
          tags: [core, helm-repos]

        # MinIO
        - name: Deploy MinIO (S3-compatible storage)
          kubernetes.core.helm:
            name: minio
            chart_ref: bitnami/minio
            release_namespace: minio
            create_namespace: true
            kubeconfig: "{{ kubeconfig_path }}"
            wait: true
            wait_timeout: 600s
            values:
              mode: "{{ minio_mode | default('standalone') }}"
              replicas: "{{ minio_replicas | default(1) }}"
              persistence:
                enabled: true
                size: "{{ minio_storage_size }}"
                storageClass: "{{ global_storage_class | default('nfs-shared') }}"
              auth:
                rootUser: "{{ minio_access_key }}"
                rootPassword: "{{ minio_secret_key }}"
              service:
                type: NodePort
                nodePorts:
                  api: "{{ minio_nodeport | int }}"
              consoleService:
                type: NodePort
                nodePorts:
                  console: "{{ minio_console_nodeport | int }}"
              resources:
                requests:
                  memory: "{{ minio_memory_request }}"
                  cpu: "{{ minio_cpu_request }}"
                limits:
                  memory: "{{ minio_memory_limit }}"
                  cpu: "{{ minio_cpu_limit }}"
          tags: [core, storage, minio]

        # Prometheus Stack
        - name: Deploy Prometheus Stack
          kubernetes.core.helm:
            name: prometheus-stack
            chart_ref: prometheus-community/kube-prometheus-stack
            release_namespace: monitoring
            create_namespace: true
            kubeconfig: "{{ kubeconfig_path }}"
            wait: true
            wait_timeout: 600s
            values:
              grafana:
                service:
                  type: NodePort
                  nodePort: "{{ grafana_nodeport }}"
              prometheus:
                service:
                  type: NodePort
                  nodePort: "{{ prometheus_nodeport }}"
          tags: [core, monitoring, prometheus]

        # Argo CD
        - name: Deploy Argo CD
          kubernetes.core.helm:
            name: argocd
            chart_ref: argo/argo-cd
            release_namespace: argocd
            create_namespace: true
            kubeconfig: "{{ kubeconfig_path }}"
            wait: true
            wait_timeout: 600s
            values:
              server:
                service:
                  type: NodePort
                  nodePort: "{{ argocd_nodeport | default(30080) }}"
          tags: [mlops, argocd]

        # Argo Workflows
        - name: Deploy Argo Workflows
          kubernetes.core.helm:
            name: argo-workflows
            chart_ref: argo/argo-workflows
            release_namespace: argowf
            create_namespace: true
            kubeconfig: "{{ kubeconfig_path }}"
            wait: true
            wait_timeout: 600s
          tags: [mlops, workflows]

        # MLflow
        - name: Deploy MLflow
          include_role:
            name: mlflow
          tags: [mlops, mlflow]

      when: k3s_state is not defined or k3s_state != "absent"

# Play 4: Demo Application
- name: Deploy Demo Application
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Deploy ML Demo Pipeline
      block:
        - include_role:
            name: mlops_demo_app
      when: k3s_state is not defined or k3s_state != "absent"
      tags: [demo, mlops-demo]

# Play 5: Summary and Cleanup
- name: Deployment Summary and Cleanup
  hosts: localhost:nfs_server
  gather_facts: false
  tasks:
    # Deployment Summary (localhost only)
    - name: Show deployment summary
      debug:
        msg:
          - "ðŸŽ‰ MLOps Platform Deployment Complete!"
          - ""
          - "Access your services:"
          - "- Grafana: http://{{ hostvars[groups['k3s_control_plane'][0]]['ansible_default_ipv4']['address'] }}:{{ grafana_nodeport }}"
          - "- Prometheus: http://{{ hostvars[groups['k3s_control_plane'][0]]['ansible_default_ipv4']['address'] }}:{{ prometheus_nodeport }}"
          - "- MinIO Console: http://{{ hostvars[groups['k3s_control_plane'][0]]['ansible_default_ipv4']['address'] }}:{{ minio_console_nodeport }}"
          - "- MLflow: http://{{ hostvars[groups['k3s_control_plane'][0]]['ansible_default_ipv4']['address'] }}:{{ mlflow_nodeport }}"
          - "- Argo CD: http://{{ hostvars[groups['k3s_control_plane'][0]]['ansible_default_ipv4']['address'] }}:{{ argocd_nodeport | default(30080) }}"
      when: 
        - inventory_hostname == 'localhost'
        - k3s_state is not defined or k3s_state != "absent"
      tags: [summary]

    # NFS Cleanup (nfs_server only)
    - name: Clean up NFS storage
      shell: |
        find /srv/nfs/kubernetes/ -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} \;
        echo "Cleaned up NFS storage"
      become: true
      when: 
        - inventory_hostname in groups['nfs_server']
        - k3s_state is defined and k3s_state == "absent"
      tags: [cleanup, nfs-cleanup]